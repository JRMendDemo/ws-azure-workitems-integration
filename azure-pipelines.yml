# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

schedules:
  - cron: "0 */1 * * *"
    displayName: Scheduled running syncronization script
    branches:
      include:
        - master
    always: true


trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

steps:
#- script: python -m pip install --upgrade pip && pip install --target=$(workingDirectory)$(RunScript) -r ./requirements.txt
#  displayName: 'Install dependecies'

- script: echo 'Need to define Product or Project'
  condition: and(le(length('$(wsproducts)') ,10), le(length('$(wsprojects)') ,10))
  displayName: 'Preparation params.config'

- script: python update_param.py -u $(wsuserkey) -o $(wsorgtoken) -l $(wsurl) -a $(azureurl) -ao $(azureorg) -ap $(azurepat) -m $(modificationtypes) -utc $(utcdelta) -apj $(azureproject) -wpj $(wsprojects) -aa $(azurearea)
  condition: and(le(length('$(wsproducts)') ,10), ge(length('$(wsprojects)') ,10))
  displayName: 'Preparation params.config'

- script: python update_param.py -u $(wsuserkey) -o $(wsorgtoken) -l $(wsurl) -a $(azureurl) -ao $(azureorg) -ap $(azurepat) -m $(modificationtypes) -utc $(utcdelta) -apj $(azureproject) -wp $(wsproducts) -aa $(azurearea)
  condition: eq(0,length('$(wsprojects)'))
  displayName: 'Preparation params.config'

- script: echo 'Test$(wsprojects)test'
#python update_param.py -u $(wsuserkey) -o $(wsorgtoken) -l $(wsurl) -a $(azureurl) -ao $(azureorg) -ap $(azurepat) -m $(modificationtypes) -utc $(utcdelta) -apj $(azureproject) -wp $(wsproducts) -wpj $(wsprojects) -aa $(azurearea)
  condition: and(ge(length('$(wsproducts)') ,10), ge(length('$(wsprojects)') ,10))
  displayName: 'Preparation params.config'

#- script: python ws_azure_workitems_integration/wi_integration.py
#  displayName: 'Running sync tool'
