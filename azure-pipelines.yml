# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

schedules:
  - cron: "0 */1 * * *"
    displayName: Scheduled running syncronization script
    branches:
      include:
        - master
    always: true


trigger: none
pr: none

pool:
  vmImage: ubuntu-latest
   
variables:
   - name: WS_AZUREORG
     value: 'ps-mend'
   - name: WS_AZUREAREA
     value: ''
   - name: WS_AZUREPROJECT
     value: 'TestMendProject'
   - name: WS_AZURETYPE
     value: 'Task'
   - name: WS_AZUREURL
     value: 'https://dev.azure.com/'
   - name: WS_CUSTOMFIELDS
     value: '"CustomMandatory::Add Data-&MEND:library.coordinates;CustomOptional::MEND:policy.owner.email"'
   - name: WS_MODIFICATIONTYPES
     value: 'All'
   - name: WS_RESET
     value: 'True'
   - name: WS_UTCDELTA
     value: '0'
   - name: WS_PRODUCTTOKEN
     value: ''
   - name: WS_PROJECTTOKEN
     value: '0b5bedefaee34a7b88dbc91999593b65594e883a9a2d45a58fe73e06060d38d8'
   - name: WS_URL
     value: 'https://saas.whitesourcesoftware.com'

steps:
- ${{if eq(variables.WS_AZUREAREA,'')}}: 
   - script: echo "##vso[task.setvariable variable=areapath;]${{variables.WS_AZUREPROJECT}}"
     displayName: 'Environment variables preparation #1'
- ${{else}}: 
   - script: echo "##vso[task.setvariable variable=areapath;]${{variables.WS_AZUREAREA}}"
     displayName: 'Environment variables preparation #1'
- ${{if eq(variables.WS_PRODUCTTOKEN,'')}}:
   - script: echo '##vso[task.setvariable variable=WS_PRODUCTTOKEN;]""'
     displayName: 'Environment variables preparation #2'
- ${{if eq(variables.WS_PROJECTTOKEN,'')}}:
   - script: echo '##vso[task.setvariable variable=WS_PROJECTTOKEN;]""'
     displayName: 'Environment variables preparation #3'
- script: echo ${variables.WS_CUSTOMFIELDS::1}
- script: python -m pip install --upgrade pip && pip install --target=$(workingDirectory)$(RunScript) -r ./requirements.txt
  displayName: 'Install dependencies'

- script: echo 'Need to set Product or Project Token'
  condition: and(eq(variables.WS_PRODUCTTOKEN,''), eq(variables.WS_PROJECTTOKEN,''))
  displayName: 'Check product/project token'

- script: python update_param.py --user-key $(WS_USERKEY) --api-key $(WS_APIKEY) --url $(WS_URL) --azureurl $(WS_AZUREURL) --azureorg $(WS_AZUREORG) --azurepat $(WS_AZUREPAT) --type $(WS_MODIFICATIONTYPES) --utcdelta $(WS_UTCDELTA) --azureproject $(WS_AZUREPROJECT) --wsproducttoken $(WS_PRODUCTTOKEN) --wsprojecttoken $(WS_PROJECTTOKEN) --azurearea $(areapath) --azuretype $(WS_AZURETYPE) --customfields $(WS_CUSTOMFIELDS) --reset $(WS_RESET)
  displayName: 'Preparation config file'

- script: python ws_azure_workitems_integration/wi_integration.py
  displayName: 'Running sync tool'
